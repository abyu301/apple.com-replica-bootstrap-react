{"ast":null,"code":"import React,{Component}from\"react\";import\"./Rating.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";class Rating extends Component{constructor(){super();// Not that we are using an arrow function in here\n// If we just use the standard function, we will need to bind the finction inside our constructor. The arrow function does the binding for us automatically \nthis.increment=()=>{// This works, but it is prone to error\n// During times where React doesn't imidiatelly accept the request of this function, it wouldn't work  \n// this.setState({\n//   value: this.state.value + 1\n// });\n// To check that this one fails, lets write something that should be dependent on the updated value \n// this.setState({\n//   value: this.state.value + 1\n// });\n// this.setState({\n//   value: this.state.value - 1\n// });\n// If we use an updater function to pass the current state instead, it will work\n// this.setState((prevState) => {\n//   return {\n//     value: prevState.value + 1,\n//   };\n// });\n// this.setState((state) => {\n//   return {\n//     value: state.value - 2,\n//   };\n// });\n// For the purpose of our example, lets just make the increment function arr the rating by one \nthis.setState(state=>{return{value:state.value+1};});};this.decrement=()=>{// The same thing for our decrement function \n// Lets make it so that it decreases the rating by 1 \nthis.setState(state=>{return{value:state.value-1};});};this.state={value:5};}render(){// Conditional rendering in React \nlet initialText=\"Average rating:\";let changedText=\"You rated this product:\";let displayText=\"\";let counter=1;if(this.state.value!=5){counter=counter+1;}if(counter>=2){displayText=changedText;}else{displayText=initialText;}return/*#__PURE__*/_jsxs(\"div\",{className:\"rating-wrapper\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Please rate this mac out of 10\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"postive\",onClick:this.increment,children:\" Rate up \"}),/*#__PURE__*/_jsx(\"button\",{className:\"negative\",onClick:this.decrement,children:\" Rate down \"}),/*#__PURE__*/_jsxs(\"div\",{className:\"rating-result\",children:[\" \",displayText,\" \",this.state.value]})]})]});}}export default Rating;","map":{"version":3,"names":["React","Component","jsx","_jsx","jsxs","_jsxs","Rating","constructor","increment","setState","state","value","decrement","render","initialText","changedText","displayText","counter","className","children","onClick"],"sources":["C:/Users/abyua/Desktop/Evangadi/phase 3/c7- React Routing/apple.com-replica-bootstrap-React/cliant/src/Components/Main/Rating/Rating.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Rating.css\"\r\n\r\nclass Rating extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      value: 5,\r\n    };   \r\n  }\r\n\r\n  // Not that we are using an arrow function in here\r\n  // If we just use the standard function, we will need to bind the finction inside our constructor. The arrow function does the binding for us automatically \r\n\r\n  increment = () => {\r\n    // This works, but it is prone to error\r\n    // During times where React doesn't imidiatelly accept the request of this function, it wouldn't work  \r\n    \r\n      // this.setState({\r\n      //   value: this.state.value + 1\r\n      // });\r\n\r\n\r\n    // To check that this one fails, lets write something that should be dependent on the updated value \r\n\r\n      // this.setState({\r\n      //   value: this.state.value + 1\r\n      // });\r\n\r\n      // this.setState({\r\n      //   value: this.state.value - 1\r\n      // });\r\n\r\n    // If we use an updater function to pass the current state instead, it will work\r\n\r\n      // this.setState((prevState) => {\r\n      //   return {\r\n      //     value: prevState.value + 1,\r\n      //   };\r\n      // });\r\n\r\n      // this.setState((state) => {\r\n      //   return {\r\n      //     value: state.value - 2,\r\n      //   };\r\n      // });\r\n\r\n    // For the purpose of our example, lets just make the increment function arr the rating by one \r\n      this.setState((state) => {\r\n        return {\r\n          value: state.value + 1,\r\n        };\r\n      });\r\n  };\r\n  decrement = () => {\r\n\r\n    // The same thing for our decrement function \r\n    // Lets make it so that it decreases the rating by 1 \r\n    this.setState((state) => {\r\n        return {\r\n          value: state.value - 1,\r\n        };\r\n      });\r\n    };\r\n\r\n  render() {\r\n    // Conditional rendering in React \r\n    let initialText = \"Average rating:\";\r\n    let changedText = \"You rated this product:\"\r\n    let displayText = \"\"; \r\n\r\n    let counter = 1; \r\n\r\n    if(this.state.value != 5){\r\n      counter = counter + 1; \r\n    }\r\n\r\n    if(counter >= 2){\r\n      displayText = changedText;\r\n    }else{\r\n      displayText = initialText; \r\n    }\r\n    return (\r\n      <div className=\"rating-wrapper\">\r\n        <h3>Please rate this mac out of 10</h3> \r\n        <div>\r\n          <button className=\"postive\" onClick={this.increment}> Rate up </button>\r\n          <button className=\"negative\" onClick={this.decrement}> Rate down </button>\r\n          <div className=\"rating-result\"> {displayText} {this.state.value}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Rating;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,MAAO,cAAc,QAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAErB,KAAM,CAAAC,MAAM,QAAS,CAAAL,SAAU,CAE7BM,WAAWA,CAAA,CAAE,CACX,KAAK,CAAC,CAAC,CAMT;AACA;AAAA,KAEAC,SAAS,CAAG,IAAM,CAChB;AACA;AAEE;AACA;AACA;AAGF;AAEE;AACA;AACA;AAEA;AACA;AACA;AAEF;AAEE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEF;AACE,IAAI,CAACC,QAAQ,CAAEC,KAAK,EAAK,CACvB,MAAO,CACLC,KAAK,CAAED,KAAK,CAACC,KAAK,CAAG,CACvB,CAAC,CACH,CAAC,CAAC,CACN,CAAC,MACDC,SAAS,CAAG,IAAM,CAEhB;AACA;AACA,IAAI,CAACH,QAAQ,CAAEC,KAAK,EAAK,CACrB,MAAO,CACLC,KAAK,CAAED,KAAK,CAACC,KAAK,CAAG,CACvB,CAAC,CACH,CAAC,CAAC,CACJ,CAAC,CAzDD,IAAI,CAACD,KAAK,CAAG,CACXC,KAAK,CAAE,CACT,CAAC,CACH,CAwDAE,MAAMA,CAAA,CAAG,CACP;AACA,GAAI,CAAAC,WAAW,CAAG,iBAAiB,CACnC,GAAI,CAAAC,WAAW,CAAG,yBAAyB,CAC3C,GAAI,CAAAC,WAAW,CAAG,EAAE,CAEpB,GAAI,CAAAC,OAAO,CAAG,CAAC,CAEf,GAAG,IAAI,CAACP,KAAK,CAACC,KAAK,EAAI,CAAC,CAAC,CACvBM,OAAO,CAAGA,OAAO,CAAG,CAAC,CACvB,CAEA,GAAGA,OAAO,EAAI,CAAC,CAAC,CACdD,WAAW,CAAGD,WAAW,CAC3B,CAAC,IAAI,CACHC,WAAW,CAAGF,WAAW,CAC3B,CACA,mBACET,KAAA,QAAKa,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BhB,IAAA,OAAAgB,QAAA,CAAI,gCAA8B,CAAI,CAAC,cACvCd,KAAA,QAAAc,QAAA,eACEhB,IAAA,WAAQe,SAAS,CAAC,SAAS,CAACE,OAAO,CAAE,IAAI,CAACZ,SAAU,CAAAW,QAAA,CAAC,WAAS,CAAQ,CAAC,cACvEhB,IAAA,WAAQe,SAAS,CAAC,UAAU,CAACE,OAAO,CAAE,IAAI,CAACR,SAAU,CAAAO,QAAA,CAAC,aAAW,CAAQ,CAAC,cAC1Ed,KAAA,QAAKa,SAAS,CAAC,eAAe,CAAAC,QAAA,EAAC,GAAC,CAACH,WAAW,CAAC,GAAC,CAAC,IAAI,CAACN,KAAK,CAACC,KAAK,EAAM,CAAC,EACnE,CAAC,EACH,CAAC,CAEV,CACF,CAEA,cAAe,CAAAL,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}